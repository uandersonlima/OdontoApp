// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OdontoApp.Data;

namespace OdontoApp.Migrations
{
    [DbContext(typeof(OdontoAppContext))]
    [Migration("20211112013632_PatrimonioV1")]
    partial class PatrimonioV1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("OdontoApp.Models.Access.AccessKey", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("DataGerada")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("KeyType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Key");

                    b.HasIndex("UserId");

                    b.ToTable("AccessKey");
                });

            modelBuilder.Entity("OdontoApp.Models.Agenda", b =>
                {
                    b.Property<int>("AgendaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("Fim")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Inicio")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MedicoId")
                        .HasColumnType("int");

                    b.Property<int?>("PacienteId")
                        .HasColumnType("int");

                    b.Property<bool>("Realizado")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Situacao")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Titulo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("AgendaId");

                    b.HasIndex("MedicoId");

                    b.HasIndex("PacienteId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Agenda");
                });

            modelBuilder.Entity("OdontoApp.Models.Anamnese", b =>
                {
                    b.Property<int>("AnamneseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DescricaoAnamnese")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("MedicoId")
                        .HasColumnType("int");

                    b.Property<int?>("PacienteId")
                        .HasColumnType("int");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("AnamneseId");

                    b.HasIndex("MedicoId");

                    b.HasIndex("PacienteId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Anamnese");
                });

            modelBuilder.Entity("OdontoApp.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AccessType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EnderecoId")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Nascimento")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PlanNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("EnderecoId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("OdontoApp.Models.Atestado", b =>
                {
                    b.Property<int>("AtestadoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CidAtestado")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ClinicaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAtestado")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DescricaoAtestado")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("EnderecoId")
                        .HasColumnType("int");

                    b.Property<int>("MedicoId")
                        .HasColumnType("int");

                    b.Property<string>("NMasAtestado")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ObsAtestado")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("AtestadoId");

                    b.HasIndex("ClinicaId");

                    b.HasIndex("EnderecoId");

                    b.HasIndex("MedicoId");

                    b.HasIndex("PacienteId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Atestado");
                });

            modelBuilder.Entity("OdontoApp.Models.Bairro", b =>
                {
                    b.Property<int>("BairroId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("BairroId");

                    b.ToTable("Bairro");
                });

            modelBuilder.Entity("OdontoApp.Models.Caixa", b =>
                {
                    b.Property<int>("CaixaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DescricaoCaixa")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("CaixaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Caixa");
                });

            modelBuilder.Entity("OdontoApp.Models.CargoClinica", b =>
                {
                    b.Property<int>("CargoClinicaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DescricaoCargoClinica")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("CargoClinicaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("CargoClinica");
                });

            modelBuilder.Entity("OdontoApp.Models.Categoria", b =>
                {
                    b.Property<int>("CategoriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DescricaoCategoria")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("CategoriaId");

                    b.ToTable("Categoria");
                });

            modelBuilder.Entity("OdontoApp.Models.Cep", b =>
                {
                    b.Property<int>("CepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.HasKey("CepId");

                    b.ToTable("Cep");
                });

            modelBuilder.Entity("OdontoApp.Models.Cidade", b =>
                {
                    b.Property<int>("CidadeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("CidadeId");

                    b.ToTable("Cidade");
                });

            modelBuilder.Entity("OdontoApp.Models.ClassesRelacionais.AnamnesesPerguntas", b =>
                {
                    b.Property<int>("AnamneseId")
                        .HasColumnType("int");

                    b.Property<int>("PerguntaAnamneseId")
                        .HasColumnType("int");

                    b.HasKey("AnamneseId", "PerguntaAnamneseId");

                    b.HasIndex("PerguntaAnamneseId");

                    b.ToTable("AnamnesesPerguntas");
                });

            modelBuilder.Entity("OdontoApp.Models.ClassesRelacionais.OrcamentoTratamento", b =>
                {
                    b.Property<int>("TratamentoId")
                        .HasColumnType("int");

                    b.Property<int>("OrcamentoId")
                        .HasColumnType("int");

                    b.HasKey("TratamentoId", "OrcamentoId");

                    b.HasIndex("OrcamentoId");

                    b.ToTable("OrcamentosTratamentos");
                });

            modelBuilder.Entity("OdontoApp.Models.ClassesRelacionais.PacienteTratamento", b =>
                {
                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.Property<int>("TratamentoId")
                        .HasColumnType("int");

                    b.HasKey("PacienteId", "TratamentoId");

                    b.HasIndex("TratamentoId");

                    b.ToTable("PacienteTratamento");
                });

            modelBuilder.Entity("OdontoApp.Models.ClassesRelacionais.ReceitaMedicamento", b =>
                {
                    b.Property<int>("MedicamentoId")
                        .HasColumnType("int");

                    b.Property<int>("ReceitaId")
                        .HasColumnType("int");

                    b.HasKey("MedicamentoId", "ReceitaId");

                    b.HasIndex("ReceitaId");

                    b.ToTable("ReceitaMedicamentos");
                });

            modelBuilder.Entity("OdontoApp.Models.ClassesRelacionais.ReceitaMedico", b =>
                {
                    b.Property<int>("ReceitaId")
                        .HasColumnType("int");

                    b.Property<int>("MedicoId")
                        .HasColumnType("int");

                    b.HasKey("ReceitaId", "MedicoId");

                    b.HasIndex("MedicoId");

                    b.ToTable("ReceitaMedico");
                });

            modelBuilder.Entity("OdontoApp.Models.Clinica", b =>
                {
                    b.Property<int>("ClinicaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CnpjClinica")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("EnderecoId")
                        .HasColumnType("int");

                    b.Property<string>("NomeClinica")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("QuantidaDeCadeiraClinica")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TelefoneClinica")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("ClinicaId");

                    b.HasIndex("EnderecoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Clinica");
                });

            modelBuilder.Entity("OdontoApp.Models.ClinicaCargoClinica", b =>
                {
                    b.Property<int>("ClinicaId")
                        .HasColumnType("int");

                    b.Property<int>("CargoClinicaId")
                        .HasColumnType("int");

                    b.HasKey("ClinicaId", "CargoClinicaId");

                    b.HasIndex("CargoClinicaId");

                    b.ToTable("ClinicaCargoClinica");
                });

            modelBuilder.Entity("OdontoApp.Models.DentesRegiao", b =>
                {
                    b.Property<int>("DentesRegiaoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("DentesRegiaoId");

                    b.ToTable("DentesRegiao");
                });

            modelBuilder.Entity("OdontoApp.Models.Despesa", b =>
                {
                    b.Property<int>("DespesaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CaixaId")
                        .HasColumnType("int");

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<string>("ComprovanteDespesa")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("DataDespesa")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DescricaoDespesa")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("DespesaId");

                    b.HasIndex("CaixaId");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Despesa");
                });

            modelBuilder.Entity("OdontoApp.Models.Endereco", b =>
                {
                    b.Property<int>("EnderecoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BairroId")
                        .HasColumnType("int");

                    b.Property<int>("CepId")
                        .HasColumnType("int");

                    b.Property<int>("CidadeId")
                        .HasColumnType("int");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int");

                    b.Property<int?>("MedicoId")
                        .HasColumnType("int");

                    b.Property<string>("NumeroEndereco")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("RuaId")
                        .HasColumnType("int");

                    b.HasKey("EnderecoId");

                    b.HasIndex("BairroId");

                    b.HasIndex("CepId");

                    b.HasIndex("CidadeId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("MedicoId");

                    b.HasIndex("RuaId");

                    b.ToTable("Endereco");
                });

            modelBuilder.Entity("OdontoApp.Models.Estado", b =>
                {
                    b.Property<int>("EstadoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("EstadoId");

                    b.ToTable("Estado");
                });

            modelBuilder.Entity("OdontoApp.Models.Estoque.EntradaSaida", b =>
                {
                    b.Property<int>("EntradaSaidaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DataTransacao")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EstoqueId")
                        .HasColumnType("int");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.Property<string>("TransactionType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("EntradaSaidaId");

                    b.HasIndex("EstoqueId");

                    b.ToTable("EntradaSaida");
                });

            modelBuilder.Entity("OdontoApp.Models.Estoque.Estoque", b =>
                {
                    b.Property<int>("EstoqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ProdutoId")
                        .HasColumnType("int");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.Property<decimal>("ValorIndividual")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("ValorTotal")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("EstoqueId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("Estoque");
                });

            modelBuilder.Entity("OdontoApp.Models.Estoque.Produto", b =>
                {
                    b.Property<int>("ProdutoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("EstoqueMaximo")
                        .HasColumnType("int");

                    b.Property<int>("EstoqueMinimo")
                        .HasColumnType("int");

                    b.Property<string>("Marca")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("ProdutoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Produto");
                });

            modelBuilder.Entity("OdontoApp.Models.Imagem", b =>
                {
                    b.Property<Guid>("ImagemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Diretorio")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("MedicoId")
                        .HasColumnType("int");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("ImagemId");

                    b.HasIndex("MedicoId");

                    b.HasIndex("PacienteId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Imagem");
                });

            modelBuilder.Entity("OdontoApp.Models.Medicamento", b =>
                {
                    b.Property<int>("MedicamentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DescricaoMedicamento")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PosologiaId")
                        .HasColumnType("int");

                    b.Property<int>("StatusMedicamentoId")
                        .HasColumnType("int");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("MedicamentoId");

                    b.HasIndex("PosologiaId");

                    b.HasIndex("StatusMedicamentoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Medicamento");
                });

            modelBuilder.Entity("OdontoApp.Models.Medico", b =>
                {
                    b.Property<int>("MedicoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NomeMedico")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NumeroCroMedico")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("MedicoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Medico");
                });

            modelBuilder.Entity("OdontoApp.Models.Message", b =>
                {
                    b.Property<string>("Messagecode")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ReceiverUserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("SenderUserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("TimeDelivered")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("TimeSent")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ViewedTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Messagecode");

                    b.HasIndex("ReceiverUserId");

                    b.HasIndex("SenderUserId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("OdontoApp.Models.Notification", b =>
                {
                    b.Property<Guid>("NotificationCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.HasKey("NotificationCode");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("OdontoApp.Models.Orcamento", b =>
                {
                    b.Property<int>("OrcamentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DataOrcamento")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DentesRegiaoId")
                        .HasColumnType("int");

                    b.Property<string>("DescricaoOrcamento")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("MedicoId")
                        .HasColumnType("int");

                    b.Property<string>("ObsOrcamento")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.Property<int?>("PlanoId")
                        .HasColumnType("int");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<decimal>("ValorDescontoOrcamento")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal>("ValorOrcamento")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("OrcamentoId");

                    b.HasIndex("DentesRegiaoId");

                    b.HasIndex("MedicoId");

                    b.HasIndex("PacienteId");

                    b.HasIndex("PlanoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Orcamento");
                });

            modelBuilder.Entity("OdontoApp.Models.Paciente", b =>
                {
                    b.Property<int>("PacienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("varchar(14) CHARACTER SET utf8mb4")
                        .HasMaxLength(14);

                    b.Property<string>("ComoChegouPaciente")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DDD")
                        .IsRequired()
                        .HasColumnType("varchar(2) CHARACTER SET utf8mb4")
                        .HasMaxLength(2);

                    b.Property<string>("EmailPaciente")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("EnderecoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Nascimento")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NomePaciente")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NumeroProntuarioPaciente")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ObsPaciente")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("PlanoId")
                        .HasColumnType("int");

                    b.Property<string>("RgPaciente")
                        .IsRequired()
                        .HasColumnType("varchar(14) CHARACTER SET utf8mb4")
                        .HasMaxLength(14);

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("varchar(9) CHARACTER SET utf8mb4")
                        .HasMaxLength(9);

                    b.Property<string>("UsuarioId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("PacienteId");

                    b.HasIndex("EnderecoId");

                    b.HasIndex("PlanoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Paciente");
                });

            modelBuilder.Entity("OdontoApp.Models.Pergunta", b =>
                {
                    b.Property<int>("PerguntaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DescricaoPergunta")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("PerguntaId");

                    b.ToTable("Pergunta");
                });

            modelBuilder.Entity("OdontoApp.Models.PerguntaAnamnese", b =>
                {
                    b.Property<int>("PerguntaAnamneseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("MedicoId")
                        .HasColumnType("int");

                    b.Property<int>("PerguntaId")
                        .HasColumnType("int");

                    b.Property<int?>("RespostaId")
                        .HasColumnType("int");

                    b.Property<int>("TipoPerguntaId")
                        .HasColumnType("int");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("PerguntaAnamneseId");

                    b.HasIndex("MedicoId");

                    b.HasIndex("PerguntaId");

                    b.HasIndex("RespostaId");

                    b.HasIndex("TipoPerguntaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("PerguntaAnamnese");
                });

            modelBuilder.Entity("OdontoApp.Models.Plano", b =>
                {
                    b.Property<int>("PlanoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CpfResponsavelPlano")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NomePlano")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NumeroPlano")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("PlanoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Plano");
                });

            modelBuilder.Entity("OdontoApp.Models.Posologia", b =>
                {
                    b.Property<int>("PosologiaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DescricaoPosologia")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("PosologiaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Posologia");
                });

            modelBuilder.Entity("OdontoApp.Models.Promocoes.CodigoPromocional", b =>
                {
                    b.Property<int>("CodigoPromocionalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Codigo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("IndentificadorPlano")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.HasKey("CodigoPromocionalId");

                    b.ToTable("CodigosPromocionais");
                });

            modelBuilder.Entity("OdontoApp.Models.Recebimento", b =>
                {
                    b.Property<int>("RecebimentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ComprovanteRecebimento")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("DataRecebimento")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DentesRegiaoId")
                        .HasColumnType("int");

                    b.Property<int>("MedicoId")
                        .HasColumnType("int");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.Property<int>("PlanoId")
                        .HasColumnType("int");

                    b.Property<int>("TratamentoId")
                        .HasColumnType("int");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("RecebimentoId");

                    b.HasIndex("DentesRegiaoId");

                    b.HasIndex("MedicoId");

                    b.HasIndex("PacienteId");

                    b.HasIndex("PlanoId");

                    b.HasIndex("TratamentoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Recebimento");
                });

            modelBuilder.Entity("OdontoApp.Models.Receita", b =>
                {
                    b.Property<int>("ReceitaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("ReceitaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Receita");
                });

            modelBuilder.Entity("OdontoApp.Models.Receituario", b =>
                {
                    b.Property<int>("ReceituarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClinicaId")
                        .HasColumnType("int");

                    b.Property<int>("EnderecoId")
                        .HasColumnType("int");

                    b.Property<int>("MedicoId")
                        .HasColumnType("int");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.Property<int>("ReceitaId")
                        .HasColumnType("int");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("ReceituarioId");

                    b.HasIndex("ClinicaId");

                    b.HasIndex("EnderecoId");

                    b.HasIndex("MedicoId");

                    b.HasIndex("PacienteId");

                    b.HasIndex("ReceitaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Receituario");
                });

            modelBuilder.Entity("OdontoApp.Models.Resposta", b =>
                {
                    b.Property<int>("RespostaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descricao1")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("RespostaId");

                    b.ToTable("Resposta");
                });

            modelBuilder.Entity("OdontoApp.Models.Rua", b =>
                {
                    b.Property<int>("RuaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("RuaId");

                    b.ToTable("Rua");
                });

            modelBuilder.Entity("OdontoApp.Models.StatusMedicamento", b =>
                {
                    b.Property<int>("StatusMedicamentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DescricaoStatusMedicamento")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("StatusMedicamentoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("StatusMedicamento");
                });

            modelBuilder.Entity("OdontoApp.Models.TipoPergunta", b =>
                {
                    b.Property<int>("TipoPerguntaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DescricaoTipoPergunta")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("TipoPerguntaId");

                    b.ToTable("TipoPergunta");
                });

            modelBuilder.Entity("OdontoApp.Models.Tratamento", b =>
                {
                    b.Property<int>("TratamentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DentesRegiaoId")
                        .HasColumnType("int");

                    b.Property<string>("NomeTratamento")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("PacienteId")
                        .HasColumnType("int");

                    b.Property<int?>("PlanoId")
                        .HasColumnType("int");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<decimal>("ValorTratamento")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("TratamentoId");

                    b.HasIndex("DentesRegiaoId");

                    b.HasIndex("PacienteId");

                    b.HasIndex("PlanoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Tratamento");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OdontoApp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OdontoApp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .IsRequired();

                    b.HasOne("OdontoApp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OdontoApp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired();
                });

            modelBuilder.Entity("OdontoApp.Models.Access.AccessKey", b =>
                {
                    b.HasOne("OdontoApp.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OdontoApp.Models.Agenda", b =>
                {
                    b.HasOne("OdontoApp.Models.Medico", "Medico")
                        .WithMany("Agendas")
                        .HasForeignKey("MedicoId");

                    b.HasOne("OdontoApp.Models.Paciente", "Paciente")
                        .WithMany("Agendas")
                        .HasForeignKey("PacienteId");

                    b.HasOne("OdontoApp.Models.ApplicationUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("OdontoApp.Models.Anamnese", b =>
                {
                    b.HasOne("OdontoApp.Models.Medico", "Medico")
                        .WithMany()
                        .HasForeignKey("MedicoId");

                    b.HasOne("OdontoApp.Models.Paciente", "Paciente")
                        .WithMany("Anamneses")
                        .HasForeignKey("PacienteId");

                    b.HasOne("OdontoApp.Models.ApplicationUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("OdontoApp.Models.ApplicationUser", b =>
                {
                    b.HasOne("OdontoApp.Models.Endereco", "Endereco")
                        .WithMany()
                        .HasForeignKey("EnderecoId")
                        .IsRequired();
                });

            modelBuilder.Entity("OdontoApp.Models.Atestado", b =>
                {
                    b.HasOne("OdontoApp.Models.Clinica", "Clinica")
                        .WithMany("Atestados")
                        .HasForeignKey("ClinicaId")
                        .IsRequired();

                    b.HasOne("OdontoApp.Models.Endereco", "Endereco")
                        .WithMany("Atestados")
                        .HasForeignKey("EnderecoId")
                        .IsRequired();

                    b.HasOne("OdontoApp.Models.Medico", "Medico")
                        .WithMany("Atestados")
                        .HasForeignKey("MedicoId")
                        .IsRequired();

                    b.HasOne("OdontoApp.Models.Paciente", "Paciente")
                        .WithMany("Atestados")
                        .HasForeignKey("PacienteId")
                        .IsRequired();

                    b.HasOne("OdontoApp.Models.ApplicationUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("OdontoApp.Models.Caixa", b =>
                {
                    b.HasOne("OdontoApp.Models.ApplicationUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("OdontoApp.Models.CargoClinica", b =>
                {
                    b.HasOne("OdontoApp.Models.ApplicationUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("OdontoApp.Models.ClassesRelacionais.AnamnesesPerguntas", b =>
                {
                    b.HasOne("OdontoApp.Models.Anamnese", "Anamnese")
                        .WithMany("AnamnesesPerguntas")
                        .HasForeignKey("AnamneseId")
                        .IsRequired();

                    b.HasOne("OdontoApp.Models.PerguntaAnamnese", "PerguntaAnamnese")
                        .WithMany("AnamnesesPerguntas")
                        .HasForeignKey("PerguntaAnamneseId")
                        .IsRequired();
                });

            modelBuilder.Entity("OdontoApp.Models.ClassesRelacionais.OrcamentoTratamento", b =>
                {
                    b.HasOne("OdontoApp.Models.Orcamento", "Orcamento")
                        .WithMany("OrcamentoTratamentos")
                        .HasForeignKey("OrcamentoId")
                        .IsRequired();

                    b.HasOne("OdontoApp.Models.Tratamento", "Tratamento")
                        .WithMany("TratamentoOrcamentos")
                        .HasForeignKey("TratamentoId")
                        .IsRequired();
                });

            modelBuilder.Entity("OdontoApp.Models.ClassesRelacionais.PacienteTratamento", b =>
                {
                    b.HasOne("OdontoApp.Models.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId")
                        .IsRequired();

                    b.HasOne("OdontoApp.Models.Tratamento", "Tratamento")
                        .WithMany()
                        .HasForeignKey("TratamentoId")
                        .IsRequired();
                });

            modelBuilder.Entity("OdontoApp.Models.ClassesRelacionais.ReceitaMedicamento", b =>
                {
                    b.HasOne("OdontoApp.Models.Medicamento", "Medicamento")
                        .WithMany("ReceitaMedicamentos")
                        .HasForeignKey("MedicamentoId")
                        .IsRequired();

                    b.HasOne("OdontoApp.Models.Receita", "Receita")
                        .WithMany("ReceitaMedicamentos")
                        .HasForeignKey("ReceitaId")
                        .IsRequired();
                });

            modelBuilder.Entity("OdontoApp.Models.ClassesRelacionais.ReceitaMedico", b =>
                {
                    b.HasOne("OdontoApp.Models.Medico", "Medico")
                        .WithMany("ReceitaMedicos")
                        .HasForeignKey("MedicoId")
                        .IsRequired();

                    b.HasOne("OdontoApp.Models.Receita", "Receita")
                        .WithMany("ReceitaMedicos")
                        .HasForeignKey("ReceitaId")
                        .IsRequired();
                });

            modelBuilder.Entity("OdontoApp.Models.Clinica", b =>
                {
                    b.HasOne("OdontoApp.Models.Endereco", "Endereco")
                        .WithMany("Clinicas")
                        .HasForeignKey("EnderecoId")
                        .IsRequired();

                    b.HasOne("OdontoApp.Models.ApplicationUser", "Usuario")
                        .WithMany("Clinicas")
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("OdontoApp.Models.ClinicaCargoClinica", b =>
                {
                    b.HasOne("OdontoApp.Models.CargoClinica", "CargoClinica")
                        .WithMany("ClinicaCargoClinicas")
                        .HasForeignKey("CargoClinicaId")
                        .IsRequired();

                    b.HasOne("OdontoApp.Models.Clinica", "Clinica")
                        .WithMany("ClinicaCargoClinicas")
                        .HasForeignKey("ClinicaId")
                        .IsRequired();
                });

            modelBuilder.Entity("OdontoApp.Models.Despesa", b =>
                {
                    b.HasOne("OdontoApp.Models.Caixa", "Caixa")
                        .WithMany("Despesas")
                        .HasForeignKey("CaixaId")
                        .IsRequired();

                    b.HasOne("OdontoApp.Models.Categoria", "Categoria")
                        .WithMany("Despesas")
                        .HasForeignKey("CategoriaId")
                        .IsRequired();

                    b.HasOne("OdontoApp.Models.ApplicationUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("OdontoApp.Models.Endereco", b =>
                {
                    b.HasOne("OdontoApp.Models.Bairro", "Bairro")
                        .WithMany("Enderecos")
                        .HasForeignKey("BairroId")
                        .IsRequired();

                    b.HasOne("OdontoApp.Models.Cep", "Cep")
                        .WithMany("Enderecos")
                        .HasForeignKey("CepId")
                        .IsRequired();

                    b.HasOne("OdontoApp.Models.Cidade", "Cidade")
                        .WithMany("Enderecos")
                        .HasForeignKey("CidadeId")
                        .IsRequired();

                    b.HasOne("OdontoApp.Models.Estado", "Estado")
                        .WithMany("Enderecos")
                        .HasForeignKey("EstadoId")
                        .IsRequired();

                    b.HasOne("OdontoApp.Models.Medico", "Medico")
                        .WithMany()
                        .HasForeignKey("MedicoId");

                    b.HasOne("OdontoApp.Models.Rua", "Rua")
                        .WithMany("Enderecos")
                        .HasForeignKey("RuaId")
                        .IsRequired();
                });

            modelBuilder.Entity("OdontoApp.Models.Estoque.EntradaSaida", b =>
                {
                    b.HasOne("OdontoApp.Models.Estoque.Estoque", "Estoque")
                        .WithMany("EntradaSaidas")
                        .HasForeignKey("EstoqueId")
                        .IsRequired();
                });

            modelBuilder.Entity("OdontoApp.Models.Estoque.Estoque", b =>
                {
                    b.HasOne("OdontoApp.Models.Estoque.Produto", "Produto")
                        .WithMany("Estoques")
                        .HasForeignKey("ProdutoId")
                        .IsRequired();
                });

            modelBuilder.Entity("OdontoApp.Models.Estoque.Produto", b =>
                {
                    b.HasOne("OdontoApp.Models.ApplicationUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("OdontoApp.Models.Imagem", b =>
                {
                    b.HasOne("OdontoApp.Models.Medico", "Medico")
                        .WithMany("Imagens")
                        .HasForeignKey("MedicoId")
                        .IsRequired();

                    b.HasOne("OdontoApp.Models.Paciente", "Paciente")
                        .WithMany("Imagems")
                        .HasForeignKey("PacienteId")
                        .IsRequired();

                    b.HasOne("OdontoApp.Models.ApplicationUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("OdontoApp.Models.Medicamento", b =>
                {
                    b.HasOne("OdontoApp.Models.Posologia", "Posologia")
                        .WithMany("Medicamentos")
                        .HasForeignKey("PosologiaId")
                        .IsRequired();

                    b.HasOne("OdontoApp.Models.StatusMedicamento", "StatusMedicamento")
                        .WithMany("Medicamentos")
                        .HasForeignKey("StatusMedicamentoId")
                        .IsRequired();

                    b.HasOne("OdontoApp.Models.ApplicationUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("OdontoApp.Models.Medico", b =>
                {
                    b.HasOne("OdontoApp.Models.ApplicationUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("OdontoApp.Models.Message", b =>
                {
                    b.HasOne("OdontoApp.Models.ApplicationUser", "ReceiverUser")
                        .WithMany()
                        .HasForeignKey("ReceiverUserId");

                    b.HasOne("OdontoApp.Models.ApplicationUser", "SenderUser")
                        .WithMany()
                        .HasForeignKey("SenderUserId");
                });

            modelBuilder.Entity("OdontoApp.Models.Orcamento", b =>
                {
                    b.HasOne("OdontoApp.Models.DentesRegiao", null)
                        .WithMany("Orcamentos")
                        .HasForeignKey("DentesRegiaoId");

                    b.HasOne("OdontoApp.Models.Medico", "Medico")
                        .WithMany("Orcamentos")
                        .HasForeignKey("MedicoId");

                    b.HasOne("OdontoApp.Models.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId")
                        .IsRequired();

                    b.HasOne("OdontoApp.Models.Plano", "Plano")
                        .WithMany("Orcamentos")
                        .HasForeignKey("PlanoId");

                    b.HasOne("OdontoApp.Models.ApplicationUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("OdontoApp.Models.Paciente", b =>
                {
                    b.HasOne("OdontoApp.Models.Endereco", "Endereco")
                        .WithMany("Pacientes")
                        .HasForeignKey("EnderecoId")
                        .IsRequired();

                    b.HasOne("OdontoApp.Models.Plano", "Plano")
                        .WithMany("Pacientes")
                        .HasForeignKey("PlanoId");

                    b.HasOne("OdontoApp.Models.ApplicationUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("OdontoApp.Models.PerguntaAnamnese", b =>
                {
                    b.HasOne("OdontoApp.Models.Medico", null)
                        .WithMany("PerguntaAnamneses")
                        .HasForeignKey("MedicoId");

                    b.HasOne("OdontoApp.Models.Pergunta", "Pergunta")
                        .WithMany("PerguntaAnamneses")
                        .HasForeignKey("PerguntaId")
                        .IsRequired();

                    b.HasOne("OdontoApp.Models.Resposta", "Resposta")
                        .WithMany("PerguntaAnamneses")
                        .HasForeignKey("RespostaId");

                    b.HasOne("OdontoApp.Models.TipoPergunta", "TipoPergunta")
                        .WithMany("PerguntaAnamneses")
                        .HasForeignKey("TipoPerguntaId")
                        .IsRequired();

                    b.HasOne("OdontoApp.Models.ApplicationUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("OdontoApp.Models.Plano", b =>
                {
                    b.HasOne("OdontoApp.Models.ApplicationUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("OdontoApp.Models.Posologia", b =>
                {
                    b.HasOne("OdontoApp.Models.ApplicationUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("OdontoApp.Models.Recebimento", b =>
                {
                    b.HasOne("OdontoApp.Models.DentesRegiao", "DentesRegiao")
                        .WithMany("Recebimentos")
                        .HasForeignKey("DentesRegiaoId")
                        .IsRequired();

                    b.HasOne("OdontoApp.Models.Medico", "Medico")
                        .WithMany("Recebimentos")
                        .HasForeignKey("MedicoId")
                        .IsRequired();

                    b.HasOne("OdontoApp.Models.Paciente", "Paciente")
                        .WithMany("Recebimentos")
                        .HasForeignKey("PacienteId")
                        .IsRequired();

                    b.HasOne("OdontoApp.Models.Plano", "Plano")
                        .WithMany("Recebimentos")
                        .HasForeignKey("PlanoId")
                        .IsRequired();

                    b.HasOne("OdontoApp.Models.Tratamento", "Tratamento")
                        .WithMany("Recebimentos")
                        .HasForeignKey("TratamentoId")
                        .IsRequired();

                    b.HasOne("OdontoApp.Models.ApplicationUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("OdontoApp.Models.Receita", b =>
                {
                    b.HasOne("OdontoApp.Models.ApplicationUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("OdontoApp.Models.Receituario", b =>
                {
                    b.HasOne("OdontoApp.Models.Clinica", "Clinica")
                        .WithMany("Receituarios")
                        .HasForeignKey("ClinicaId")
                        .IsRequired();

                    b.HasOne("OdontoApp.Models.Endereco", "Endereco")
                        .WithMany("Receituarios")
                        .HasForeignKey("EnderecoId")
                        .IsRequired();

                    b.HasOne("OdontoApp.Models.Medico", "Medico")
                        .WithMany("Receituarios")
                        .HasForeignKey("MedicoId")
                        .IsRequired();

                    b.HasOne("OdontoApp.Models.Paciente", "Paciente")
                        .WithMany("Receituarios")
                        .HasForeignKey("PacienteId")
                        .IsRequired();

                    b.HasOne("OdontoApp.Models.Receita", "Receita")
                        .WithMany("Receituarios")
                        .HasForeignKey("ReceitaId")
                        .IsRequired();

                    b.HasOne("OdontoApp.Models.ApplicationUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("OdontoApp.Models.StatusMedicamento", b =>
                {
                    b.HasOne("OdontoApp.Models.ApplicationUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("OdontoApp.Models.Tratamento", b =>
                {
                    b.HasOne("OdontoApp.Models.DentesRegiao", "DentesRegiao")
                        .WithMany("Tratamentos")
                        .HasForeignKey("DentesRegiaoId")
                        .IsRequired();

                    b.HasOne("OdontoApp.Models.Paciente", "Paciente")
                        .WithMany("Tratamentos")
                        .HasForeignKey("PacienteId");

                    b.HasOne("OdontoApp.Models.Plano", "Plano")
                        .WithMany("Tratamentos")
                        .HasForeignKey("PlanoId");

                    b.HasOne("OdontoApp.Models.ApplicationUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");
                });
#pragma warning restore 612, 618
        }
    }
}
